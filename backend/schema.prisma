// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model Report {
  id         String   @id @default(cuid())
  title      String   @unique @default("")
  status     String?  @default("DRAFT")
  updatedAt  DateTime @default(now()) @updatedAt
  assignedTo User[]   @relation("Report_assignedTo")
  tags       Tag[]    @relation("Report_tags")
  site       Site?    @relation("Report_site", fields: [siteId], references: [id])
  siteId     String?  @map("site")

  @@index([siteId])
}

model User {
  id                      String    @id @default(cuid())
  name                    String    @default("")
  email                   String    @unique @default("")
  password                String?
  cpso                    String?   @unique
  policyAccepted          Boolean   @default(false)
  role                    Role?     @relation("User_role", fields: [roleId], references: [id])
  roleId                  String?   @map("role")
  reports                 Report[]  @relation("Report_assignedTo")
  sites                   Site[]    @relation("User_sites")
  requests                Request[] @relation("Request_user")
  passwordResetToken      String?
  passwordResetIssuedAt   DateTime?
  passwordResetRedeemedAt DateTime?
  magicAuthToken          String?
  magicAuthIssuedAt       DateTime?
  magicAuthRedeemedAt     DateTime?

  @@index([roleId])
}

model Role {
  id               String  @id @default(cuid())
  name             String  @default("")
  canReadReports   Boolean @default(false)
  canManageReports Boolean @default(false)
  canSeeOtherUsers Boolean @default(false)
  canManageUsers   Boolean @default(false)
  canManageRoles   Boolean @default(false)
  canManageSites   Boolean @default(false)
  canManageTags    Boolean @default(false)
  canManagePolicy  Boolean @default(false)
  assignedTo       User[]  @relation("User_role")
}

model Tag {
  id               String   @id @default(cuid())
  name             String   @default("")
  description      String   @default("")
  from_Report_tags Report[] @relation("Report_tags")
}

model Site {
  id               String   @id @default(cuid())
  name             String   @default("")
  siteID           String   @unique @default("")
  from_Report_site Report[] @relation("Report_site")
  from_User_sites  User[]   @relation("User_sites")
}

model Policy {
  id      Int  @id
  content Json @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
}

model Faq {
  id      Int  @id
  content Json @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
}

model Banner {
  id                 Int      @id
  date               DateTime
  individualReportVersion  String   @default("")
  groupReportVersion String   @default("")
}

model Request {
  id          String   @id @default(cuid())
  type        String   @default("PROFILE")
  updatedAt   DateTime @default(now()) @updatedAt
  description Json?    @default("{\"name\":\"\",\"email\":\"\",\"cpso\":\"\",\"sites\":{\"id\":\"\",\"name\":\"\"}}")
  user        User?    @relation("Request_user", fields: [userId], references: [id])
  userId      String?  @map("user")
  status      String?  @default("OUTSTANDING")

  @@index([userId])
}

model About {
  id      Int  @id
  content Json @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
}
