# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Report {
  id: ID!
  title: String
  status: String
  updatedAt: DateTime
  assignedTo(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  assignedToCount(where: UserWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  site: Site
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ReportWhereUniqueInput {
  id: ID
  title: String
}

input ReportWhereInput {
  AND: [ReportWhereInput!]
  OR: [ReportWhereInput!]
  NOT: [ReportWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringNullableFilter
  updatedAt: DateTimeFilter
  assignedTo: UserManyRelationFilter
  tags: TagManyRelationFilter
  site: SiteWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input ReportOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ReportUpdateInput {
  title: String
  status: String
  updatedAt: DateTime
  assignedTo: UserRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  site: SiteRelateToOneForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input SiteRelateToOneForUpdateInput {
  create: SiteCreateInput
  connect: SiteWhereUniqueInput
  disconnect: Boolean
}

input ReportUpdateArgs {
  where: ReportWhereUniqueInput!
  data: ReportUpdateInput!
}

input ReportCreateInput {
  title: String
  status: String
  updatedAt: DateTime
  assignedTo: UserRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  site: SiteRelateToOneForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input SiteRelateToOneForCreateInput {
  create: SiteCreateInput
  connect: SiteWhereUniqueInput
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  cpso: String
  policyAccepted: Boolean
  role: Role
  reports(where: ReportWhereInput! = {}, orderBy: [ReportOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReportWhereUniqueInput): [Report!]
  reportsCount(where: ReportWhereInput! = {}): Int
  sites(where: SiteWhereInput! = {}, orderBy: [SiteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SiteWhereUniqueInput): [Site!]
  sitesCount(where: SiteWhereInput! = {}): Int
  requests(where: RequestWhereInput! = {}, orderBy: [RequestOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RequestWhereUniqueInput): [Request!]
  requestsCount(where: RequestWhereInput! = {}): Int
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
  magicAuthToken: PasswordState
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
  cpso: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  cpso: StringNullableFilter
  policyAccepted: BooleanFilter
  role: RoleWhereInput
  reports: ReportManyRelationFilter
  sites: SiteManyRelationFilter
  requests: RequestManyRelationFilter
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
  magicAuthToken: PasswordFilter
  magicAuthIssuedAt: DateTimeNullableFilter
  magicAuthRedeemedAt: DateTimeNullableFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ReportManyRelationFilter {
  every: ReportWhereInput
  some: ReportWhereInput
  none: ReportWhereInput
}

input SiteManyRelationFilter {
  every: SiteWhereInput
  some: SiteWhereInput
  none: SiteWhereInput
}

input RequestManyRelationFilter {
  every: RequestWhereInput
  some: RequestWhereInput
  none: RequestWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  cpso: OrderDirection
  policyAccepted: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
  magicAuthIssuedAt: OrderDirection
  magicAuthRedeemedAt: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  cpso: String
  policyAccepted: Boolean
  role: RoleRelateToOneForUpdateInput
  reports: ReportRelateToManyForUpdateInput
  sites: SiteRelateToManyForUpdateInput
  requests: RequestRelateToManyForUpdateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
  magicAuthToken: String
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input ReportRelateToManyForUpdateInput {
  disconnect: [ReportWhereUniqueInput!]
  set: [ReportWhereUniqueInput!]
  create: [ReportCreateInput!]
  connect: [ReportWhereUniqueInput!]
}

input SiteRelateToManyForUpdateInput {
  disconnect: [SiteWhereUniqueInput!]
  set: [SiteWhereUniqueInput!]
  create: [SiteCreateInput!]
  connect: [SiteWhereUniqueInput!]
}

input RequestRelateToManyForUpdateInput {
  disconnect: [RequestWhereUniqueInput!]
  set: [RequestWhereUniqueInput!]
  create: [RequestCreateInput!]
  connect: [RequestWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  cpso: String
  policyAccepted: Boolean
  role: RoleRelateToOneForCreateInput
  reports: ReportRelateToManyForCreateInput
  sites: SiteRelateToManyForCreateInput
  requests: RequestRelateToManyForCreateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
  magicAuthToken: String
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

input ReportRelateToManyForCreateInput {
  create: [ReportCreateInput!]
  connect: [ReportWhereUniqueInput!]
}

input SiteRelateToManyForCreateInput {
  create: [SiteCreateInput!]
  connect: [SiteWhereUniqueInput!]
}

input RequestRelateToManyForCreateInput {
  create: [RequestCreateInput!]
  connect: [RequestWhereUniqueInput!]
}

type Role {
  id: ID!
  name: String
  canReadReports: Boolean
  canManageReports: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageSites: Boolean
  canManageTags: Boolean
  canManagePolicy: Boolean
  assignedTo(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  assignedToCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  canReadReports: BooleanFilter
  canManageReports: BooleanFilter
  canSeeOtherUsers: BooleanFilter
  canManageUsers: BooleanFilter
  canManageRoles: BooleanFilter
  canManageSites: BooleanFilter
  canManageTags: BooleanFilter
  canManagePolicy: BooleanFilter
  assignedTo: UserManyRelationFilter
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canReadReports: OrderDirection
  canManageReports: OrderDirection
  canSeeOtherUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageRoles: OrderDirection
  canManageSites: OrderDirection
  canManageTags: OrderDirection
  canManagePolicy: OrderDirection
}

input RoleUpdateInput {
  name: String
  canReadReports: Boolean
  canManageReports: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageSites: Boolean
  canManageTags: Boolean
  canManagePolicy: Boolean
  assignedTo: UserRelateToManyForUpdateInput
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canReadReports: Boolean
  canManageReports: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageSites: Boolean
  canManageTags: Boolean
  canManagePolicy: Boolean
  assignedTo: UserRelateToManyForCreateInput
}

type Tag {
  id: ID!
  name: String
  description: String
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
}

input TagUpdateInput {
  name: String
  description: String
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  description: String
}

type Site {
  id: ID!
  name: String
  siteID: String
}

input SiteWhereUniqueInput {
  id: ID
  siteID: String
}

input SiteWhereInput {
  AND: [SiteWhereInput!]
  OR: [SiteWhereInput!]
  NOT: [SiteWhereInput!]
  id: IDFilter
  name: StringFilter
  siteID: StringFilter
}

input SiteOrderByInput {
  id: OrderDirection
  name: OrderDirection
  siteID: OrderDirection
}

input SiteUpdateInput {
  name: String
  siteID: String
}

input SiteUpdateArgs {
  where: SiteWhereUniqueInput!
  data: SiteUpdateInput!
}

input SiteCreateInput {
  name: String
  siteID: String
}

type Policy {
  id: ID!
  content: Policy_content_Document
}

type Policy_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PolicyWhereUniqueInput {
  id: ID
}

input PolicyWhereInput {
  AND: [PolicyWhereInput!]
  OR: [PolicyWhereInput!]
  NOT: [PolicyWhereInput!]
  id: IDFilter
}

input PolicyOrderByInput {
  id: OrderDirection
}

input PolicyUpdateInput {
  content: JSON
}

input PolicyUpdateArgs {
  where: PolicyWhereUniqueInput! = {id: 1}
  data: PolicyUpdateInput!
}

input PolicyCreateInput {
  content: JSON
}

type Faq {
  id: ID!
  content: Faq_content_Document
}

type Faq_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input FaqWhereUniqueInput {
  id: ID
}

input FaqWhereInput {
  AND: [FaqWhereInput!]
  OR: [FaqWhereInput!]
  NOT: [FaqWhereInput!]
  id: IDFilter
}

input FaqOrderByInput {
  id: OrderDirection
}

input FaqUpdateInput {
  content: JSON
}

input FaqUpdateArgs {
  where: FaqWhereUniqueInput! = {id: 1}
  data: FaqUpdateInput!
}

input FaqCreateInput {
  content: JSON
}

type Banner {
  id: ID!
  date: DateTime
  individualReportVersion: String
  groupReportVersion: String
}

input BannerWhereUniqueInput {
  id: ID
}

input BannerWhereInput {
  AND: [BannerWhereInput!]
  OR: [BannerWhereInput!]
  NOT: [BannerWhereInput!]
  id: IDFilter
  date: DateTimeFilter
  individualReportVersion: StringFilter
  groupReportVersion: StringFilter
}

input BannerOrderByInput {
  id: OrderDirection
  date: OrderDirection
  individualReportVersion: OrderDirection
  groupReportVersion: OrderDirection
}

input BannerUpdateInput {
  date: DateTime
  individualReportVersion: String
  groupReportVersion: String
}

input BannerUpdateArgs {
  where: BannerWhereUniqueInput! = {id: 1}
  data: BannerUpdateInput!
}

input BannerCreateInput {
  date: DateTime
  individualReportVersion: String
  groupReportVersion: String
}

type Request {
  id: ID!
  type: String
  updatedAt: DateTime
  description: JSON
  user: User
  status: String
}

input RequestWhereUniqueInput {
  id: ID
}

input RequestWhereInput {
  AND: [RequestWhereInput!]
  OR: [RequestWhereInput!]
  NOT: [RequestWhereInput!]
  id: IDFilter
  type: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  status: StringNullableFilter
}

input RequestOrderByInput {
  id: OrderDirection
  type: OrderDirection
  updatedAt: OrderDirection
  status: OrderDirection
}

input RequestUpdateInput {
  type: String
  updatedAt: DateTime
  description: JSON
  user: UserRelateToOneForUpdateInput
  status: String
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input RequestUpdateArgs {
  where: RequestWhereUniqueInput!
  data: RequestUpdateInput!
}

input RequestCreateInput {
  type: String
  updatedAt: DateTime
  description: JSON
  user: UserRelateToOneForCreateInput
  status: String
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type About {
  id: ID!
  content: About_content_Document
}

type About_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input AboutWhereUniqueInput {
  id: ID
}

input AboutWhereInput {
  AND: [AboutWhereInput!]
  OR: [AboutWhereInput!]
  NOT: [AboutWhereInput!]
  id: IDFilter
}

input AboutOrderByInput {
  id: OrderDirection
}

input AboutUpdateInput {
  content: JSON
}

input AboutUpdateArgs {
  where: AboutWhereUniqueInput! = {id: 1}
  data: AboutUpdateInput!
}

input AboutCreateInput {
  content: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createReport(data: ReportCreateInput!): Report
  createReports(data: [ReportCreateInput!]!): [Report]
  updateReport(where: ReportWhereUniqueInput!, data: ReportUpdateInput!): Report
  updateReports(data: [ReportUpdateArgs!]!): [Report]
  deleteReport(where: ReportWhereUniqueInput!): Report
  deleteReports(where: [ReportWhereUniqueInput!]!): [Report]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createSite(data: SiteCreateInput!): Site
  createSites(data: [SiteCreateInput!]!): [Site]
  updateSite(where: SiteWhereUniqueInput!, data: SiteUpdateInput!): Site
  updateSites(data: [SiteUpdateArgs!]!): [Site]
  deleteSite(where: SiteWhereUniqueInput!): Site
  deleteSites(where: [SiteWhereUniqueInput!]!): [Site]
  createPolicy(data: PolicyCreateInput!): Policy
  createPolicies(data: [PolicyCreateInput!]!): [Policy]
  updatePolicy(where: PolicyWhereUniqueInput! = {id: 1}, data: PolicyUpdateInput!): Policy
  updatePolicies(data: [PolicyUpdateArgs!]!): [Policy]
  deletePolicy(where: PolicyWhereUniqueInput! = {id: 1}): Policy
  deletePolicies(where: [PolicyWhereUniqueInput!]!): [Policy]
  createFaq(data: FaqCreateInput!): Faq
  createFaqs(data: [FaqCreateInput!]!): [Faq]
  updateFaq(where: FaqWhereUniqueInput! = {id: 1}, data: FaqUpdateInput!): Faq
  updateFaqs(data: [FaqUpdateArgs!]!): [Faq]
  deleteFaq(where: FaqWhereUniqueInput! = {id: 1}): Faq
  deleteFaqs(where: [FaqWhereUniqueInput!]!): [Faq]
  createBanner(data: BannerCreateInput!): Banner
  createBanners(data: [BannerCreateInput!]!): [Banner]
  updateBanner(where: BannerWhereUniqueInput! = {id: 1}, data: BannerUpdateInput!): Banner
  updateBanners(data: [BannerUpdateArgs!]!): [Banner]
  deleteBanner(where: BannerWhereUniqueInput! = {id: 1}): Banner
  deleteBanners(where: [BannerWhereUniqueInput!]!): [Banner]
  createRequest(data: RequestCreateInput!): Request
  createRequests(data: [RequestCreateInput!]!): [Request]
  updateRequest(where: RequestWhereUniqueInput!, data: RequestUpdateInput!): Request
  updateRequests(data: [RequestUpdateArgs!]!): [Request]
  deleteRequest(where: RequestWhereUniqueInput!): Request
  deleteRequests(where: [RequestWhereUniqueInput!]!): [Request]
  createAbout(data: AboutCreateInput!): About
  createAbouts(data: [AboutCreateInput!]!): [About]
  updateAbout(where: AboutWhereUniqueInput! = {id: 1}, data: AboutUpdateInput!): About
  updateAbouts(data: [AboutUpdateArgs!]!): [About]
  deleteAbout(where: AboutWhereUniqueInput! = {id: 1}): About
  deleteAbouts(where: [AboutWhereUniqueInput!]!): [About]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(email: String!, token: String!, password: String!): RedeemUserPasswordResetTokenResult
  sendUserMagicAuthLink(email: String!): Boolean!
  redeemUserMagicAuthToken(email: String!, token: String!): RedeemUserMagicAuthTokenResult!
  uploadReports(data: [UploadReportsArgs!]!): [Int]
}

input UploadReportsArgs {
  cpso: String!
  name: String!
  email: String!
  role: String!
  title: String!
  site: String!
  tags: String!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

union RedeemUserMagicAuthTokenResult = RedeemUserMagicAuthTokenSuccess | RedeemUserMagicAuthTokenFailure

type RedeemUserMagicAuthTokenSuccess {
  token: String!
  item: User!
}

type RedeemUserMagicAuthTokenFailure {
  code: MagicLinkRedemptionErrorCode!
  message: String!
}

enum MagicLinkRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  reports(where: ReportWhereInput! = {}, orderBy: [ReportOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReportWhereUniqueInput): [Report!]
  report(where: ReportWhereUniqueInput!): Report
  reportsCount(where: ReportWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  roles(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoleWhereUniqueInput): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  sites(where: SiteWhereInput! = {}, orderBy: [SiteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SiteWhereUniqueInput): [Site!]
  site(where: SiteWhereUniqueInput!): Site
  sitesCount(where: SiteWhereInput! = {}): Int
  policies(where: PolicyWhereInput! = {id: {equals: 1}}, orderBy: [PolicyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PolicyWhereUniqueInput): [Policy!]
  policy(where: PolicyWhereUniqueInput! = {id: 1}): Policy
  policiesCount(where: PolicyWhereInput! = {id: {equals: 1}}): Int
  faqs(where: FaqWhereInput! = {id: {equals: 1}}, orderBy: [FaqOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FaqWhereUniqueInput): [Faq!]
  faq(where: FaqWhereUniqueInput! = {id: 1}): Faq
  faqsCount(where: FaqWhereInput! = {id: {equals: 1}}): Int
  banners(where: BannerWhereInput! = {id: {equals: 1}}, orderBy: [BannerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BannerWhereUniqueInput): [Banner!]
  banner(where: BannerWhereUniqueInput! = {id: 1}): Banner
  bannersCount(where: BannerWhereInput! = {id: {equals: 1}}): Int
  requests(where: RequestWhereInput! = {}, orderBy: [RequestOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RequestWhereUniqueInput): [Request!]
  request(where: RequestWhereUniqueInput!): Request
  requestsCount(where: RequestWhereInput! = {}): Int
  abouts(where: AboutWhereInput! = {id: {equals: 1}}, orderBy: [AboutOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AboutWhereUniqueInput): [About!]
  about(where: AboutWhereUniqueInput! = {id: 1}): About
  aboutsCount(where: AboutWhereInput! = {id: {equals: 1}}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(email: String!, token: String!): ValidateUserPasswordResetTokenResult
  validateCSV(data: [ValidateCSVArgs!]!): [Validator]
  requestPresignedURL(objectName: String): String
  downloadReport(objectName: String): JSON
  versions: ReportVersions
}

type Validator {
  email: String
  userExists: Boolean
  cpsoExists: Boolean
  cpsoMatches: Boolean
  siteExists: Boolean
  roleExists: Boolean
  roleMatches: Boolean
  userAssigned: String
}

input ValidateCSVArgs {
  cpso: String!
  name: String!
  email: String!
  role: String!
  title: String!
  site: String!
}

type ReportVersions {
  statusCode: Int
  error: String
  irp: [String]
  grp: [String]
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
