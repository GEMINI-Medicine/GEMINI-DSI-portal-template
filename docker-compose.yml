services:
  traefik:
    image: "traefik:v3.0"
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
  # These are the configurations for our nextjs front end
  # When Docker Compose starts this container it will automatically
  # use the Dockerfile in the frontend directory to configure it
  frontend:
    build:
      context: ./frontend
    environment:
      - NEXT_TELEMETRY_DISABLED
      - NEXT_PUBLIC_GA4_TRACKING_ID
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`localhost`)"
      - "traefik.http.routers.frontend.entrypoints=web"
    stdin_open: true # docker run -i
    tty: true # docker run -t
    depends_on:
      # Our frontend does not work without our backend
      # so this ensures our backend is loaded first
      - backend
    networks:
      - nextjs-keystone
    ports:
      - 3000:3000
    volumes:
      # Maps the frontend project directory `./frontend` to
      # our working directory in the container
      - ./frontend:/app

  # These are the configurations for our Keystone cms
  # When Docker Compose starts this container it will automatically
  # use the Dockerfile in the backend directory to configure it
  backend:
    build:
      context: ./backend
      # Only will build development stage from our dockerfile
      target: development
    environment:
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - DATABASE_URL
      - CORS
      - COOKIE_SECRET
      - MAIL_HOST
      - MAIL_PORT
      - MAIL_USER
      - MAIL_PASS
      - MAIL_FROM
      - MAIL_TO_ADMIN
      - FRONTEND_URL
      - S3_ENDPOINT
      - S3_PORT
      - S3_SSL
      - S3_BUCKET_NAME
      - S3_REGION
      - S3_ACCESS_KEY_ID
      - S3_SECRET_ACCESS_KEY
      - KEYSTONE_TELEMETRY_DISABLED
    depends_on:
      # Our backend does not work without our database
      # so this ensures our database is loaded first
      - postgres
    networks:
      - keystone-postgress
      - nextjs-keystone
      - keystone-minio
    stdin_open: true # docker run -i
    tty: true # docker run -t
    ports:
      - 3002:3000
    volumes:
      # Maps the backend project directory `./backend` to
      # our working directory in the container
      - ./backend:/backend

  # This is the configuration for our PostgreSQL database container
  # Note the `postgres` name is important, in out Keystone app when we refer
  # to  `host: "postgres"` that value is mapped on the network to the
  # address of this container.
  postgres:
    image: postgres:15.2-bullseye
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - keystone-postgress
    environment:
      # You can set the value of environment variables
      # in your docker-compose.yml file
      # Our Keystone app will use these to connect
      # to the database
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    ports:
      # Standard port for PostgreSQL databases
      - "5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # These are the configurations for our minio S3 object storage
  # When Docker Compose starts this container it will automatically
  # use the Dockerfile in the frontend directory to configure it
  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_storage:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server --console-address ":9001" /data
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:9000/minio/health/live"
        ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - keystone-minio
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio.entrypoints=web"
      - "traefik.http.routers.minio.rule=Host(`minio`)"
      - "traefik.http.routers.minio.service=minio"
      - "traefik.http.services.minio.loadbalancer.server.port=9000"

volumes:
  db-data:
  minio_storage:


networks:
  nextjs-keystone:
  keystone-postgress:
  keystone-minio:
